# There should be a file called .github/workflows/frontend-ci.yaml in the root of the project.
# on every pull request against the main branch.
name: Miro's FE CI
on:
    # push to main branch
    pull_request:
        branches: main
    # Manual trigger
    workflow_dispatch:
env:
    frontent_path: ./starter/frontend/

jobs:
    lint-job:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Setup Nodejs
              uses: actions/setup-node@v4
              with:
                node-version: '18'
            # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
            - name: Cache node modules
              # job id
              id: cache-npm
              uses: actions/cache@v3
              env:
                cache-name: cache-node-modules
              with:
                # npm cache files are stored in `~/.npm` on Linux/macOS
                path: ~/.npm
                key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                    ${{ runner.os }}-build-${{ env.cache-name }}-
                    ${{ runner.os }}-build-
                    ${{ runner.os }}-
            - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
              name: Inform of cache hit
              run: echo "cache miss :("

            - name: Install dependencies
              run: npm install env.frontend_path

            - name: Build
              run: npm run lint env.frontend_path


# TEST JOB: There should be a job in the workflow that runs the tests The job should have these steps:

# Checkout code
# Setup NodeJS
# Perform a cache action to restore cache before dependency install
# Install dependencies
# Run the npm run test command
# The two jobs above should run in parallel

# BUILD JOB: This job should only run after the first 2 succeed (student has to use the "needs" syntax) There should be a step that builds the application using docker. The job should have these steps:

# Checkout code
# Setup NodeJS
# Perform a cache action to restore cache before dependency install
# Install dependencies
# Run the npm run test command
# The pipeline should be executed automatically on pull_request The pipeline should be able to be run manually The pipeline should be running without errors with all tests passing and no output failures from any of the steps